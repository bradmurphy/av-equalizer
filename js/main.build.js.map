{"version":3,"sources":["node_modules/browser-pack/_prelude.js","app/index.js","main.build.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","Stage","this","audio","equalizer","document","querySelector","width","window","innerWidth","height","innerHeight","viewAngle","aspect","near","far","timer","bars","position","renderer","THREE","WebGLRenderer","camera","PerspectiveCamera","scene","Scene","setClearColor","createAudio","prototype","init","loadSong","createScene","context","AudioContext","analyser","createAnalyser","smoothingTimeConstant","minDecibels","maxDecibels","fftSize","sourceNode","createBufferSource","splitter","createChannelSplitter","connect","destination","song","_this","request","XMLHttpRequest","open","crossOrigin","responseType","onload","decodeAudioData","response","then","buffer","songBuffer","playSong","loop","err","_onError","send","duration","start","console","info","add","z","setSize","count","CylinderGeometry","material","MeshBasicMaterial","color","Math","random","wireframe","bar","Mesh","push","set","appendChild","domElement","render","update","_this2","bufferLength","frequencyBinCount","array","Uint8Array","getByteFrequencyData","forEach","threshold","index","scale","y","requestAnimationFrame","bind"],"mappings":"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","file":"main.build.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","'use strict';\n\n// stage constructor\nconst Stage = function() {\n\n  // selectors\n  this.audio = 'audio/sublime.mp3';\n  this.equalizer = document.querySelector('#equalizer');\n\n  // scene variables\n  this.width = window.innerWidth;\n  this.height = window.innerHeight;\n\n  this.viewAngle = 45;\n  this.aspect = this.width / this.height;\n  this.near = 0.1;\n  this.far = 100000;\n  this.timer = 0;\n  this.bars = [];\n  this.position = -80;\n\n  this.renderer = new THREE.WebGLRenderer();\n  this.camera = new THREE.PerspectiveCamera(this.viewAngle, this.aspect, this.near, this.far);\n  this.scene = new THREE.Scene();\n\n  this.renderer.setClearColor( 0xffffff, 0);\n\n  this.createAudio();\n\n};\n\n// init scene and play song\nStage.prototype.init = function() {\n\n  this.loadSong(this.audio);\n  this.createScene();\n\n};\n\n// create audio\nStage.prototype.createAudio = function() {\n\n  this.context = new AudioContext();\n  this.analyser = this.context.createAnalyser();\n  this.analyser.smoothingTimeConstant = 0.4;\n  this.analyser.minDecibels = -90;\n  this.analyser.maxDecibels = -10;\n  this.analyser.fftSize = 32;\n\n  this.sourceNode = this.context.createBufferSource();\n  let splitter = this.context.createChannelSplitter();\n\n  this.sourceNode.connect(splitter);\n\n  splitter.connect(this.analyser, 0);\n\n  this.sourceNode.connect(this.context.destination);\n\n  this.init();\n\n};\n\n// load song\nStage.prototype.loadSong = function(song) {\n\n  let request = new XMLHttpRequest();\n  request.open('GET', song, true);\n  request.crossOrigin = 'anonymous';\n  request.responseType = 'arraybuffer';\n\n  request.onload = () =>  {\n\n    this.context.decodeAudioData(request.response).then((buffer) => {\n\n      this.songBuffer = buffer;\n      this.playSong(buffer);\n      buffer.loop = true;\n\n    }).catch((err) => this._onError(err));\n\n  };\n\n  request.send();\n\n};\n\n// play song\nStage.prototype.playSong = function(buffer) {\n\n  let duration = buffer.duration;\n  this.sourceNode.buffer = buffer;\n  this.sourceNode.start(0);\n\n};\n\n// on error\nStage.prototype._onError = function(err) {\n\n  console.info('Audio Error: ' + err);\n\n};\n\n// generate equalizer\nStage.prototype.createScene = function() {\n\n  this.scene.add(this.camera);\n\n  this.camera.position.z = 200;\n\n  this.renderer.setSize(this.width, this.height);\n\n  let count = 16;\n\n  for (let i = 0; i < count; i++) {\n\n    let bars = new THREE.CylinderGeometry(5, 5, 10, 32);\n\n    let material = new THREE.MeshBasicMaterial({\n      color: Math.random() * 0xffffff,\n      wireframe: true\n    });\n\n    let bar = new THREE.Mesh(bars, material);\n\n    this.scene.add(bar);\n    this.bars.push(bar);\n\n    bar.position.set(this.position, 0, 0);\n\n    this.position += 10;\n\n  }\n\n  this.equalizer.appendChild(this.renderer.domElement);\n\n  this.render();\n\n};\n\n// update equalizer based off of audio data\nStage.prototype.update = function() {\n\n  let bufferLength = this.analyser.frequencyBinCount;\n  let array = new Uint8Array(bufferLength);\n\n  this.analyser.getByteFrequencyData(array)\n\n  array.forEach((threshold, index) => {\n\n    this.bars[index].scale.y = threshold / 64;\n\n  });\n\n};\n\n// draw scene\nStage.prototype.render = function() {\n\n  this.update();\n  this.renderer.render(this.scene, this.camera);\n\n  requestAnimationFrame(this.render.bind(this));\n\n};\n\nconst stage = new Stage();\n","(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n'use strict';\n\n// stage constructor\nvar Stage = function Stage() {\n\n  // selectors\n  this.audio = 'audio/sublime.mp3';\n  this.equalizer = document.querySelector('#equalizer');\n\n  // scene variables\n  this.width = window.innerWidth;\n  this.height = window.innerHeight;\n\n  this.viewAngle = 45;\n  this.aspect = this.width / this.height;\n  this.near = 0.1;\n  this.far = 100000;\n  this.timer = 0;\n  this.bars = [];\n  this.position = -80;\n\n  this.renderer = new THREE.WebGLRenderer();\n  this.camera = new THREE.PerspectiveCamera(this.viewAngle, this.aspect, this.near, this.far);\n  this.scene = new THREE.Scene();\n\n  this.renderer.setClearColor(0xffffff, 0);\n\n  this.createAudio();\n};\n\n// init scene and play song\nStage.prototype.init = function () {\n\n  this.loadSong(this.audio);\n  this.createScene();\n};\n\n// create audio\nStage.prototype.createAudio = function () {\n\n  this.context = new AudioContext();\n  this.analyser = this.context.createAnalyser();\n  this.analyser.smoothingTimeConstant = 0.4;\n  this.analyser.minDecibels = -90;\n  this.analyser.maxDecibels = -10;\n  this.analyser.fftSize = 32;\n\n  this.sourceNode = this.context.createBufferSource();\n  var splitter = this.context.createChannelSplitter();\n\n  this.sourceNode.connect(splitter);\n\n  splitter.connect(this.analyser, 0);\n\n  this.sourceNode.connect(this.context.destination);\n\n  this.init();\n};\n\n// load song\nStage.prototype.loadSong = function (song) {\n  var _this = this;\n\n  var request = new XMLHttpRequest();\n  request.open('GET', song, true);\n  request.crossOrigin = 'anonymous';\n  request.responseType = 'arraybuffer';\n\n  request.onload = function () {\n\n    _this.context.decodeAudioData(request.response).then(function (buffer) {\n\n      _this.songBuffer = buffer;\n      _this.playSong(buffer);\n      buffer.loop = true;\n    })['catch'](function (err) {\n      return _this._onError(err);\n    });\n  };\n\n  request.send();\n};\n\n// play song\nStage.prototype.playSong = function (buffer) {\n\n  var duration = buffer.duration;\n  this.sourceNode.buffer = buffer;\n  this.sourceNode.start(0);\n};\n\n// on error\nStage.prototype._onError = function (err) {\n\n  console.info('Audio Error: ' + err);\n};\n\n// generate equalizer\nStage.prototype.createScene = function () {\n\n  this.scene.add(this.camera);\n\n  this.camera.position.z = 200;\n\n  this.renderer.setSize(this.width, this.height);\n\n  var count = 16;\n\n  for (var i = 0; i < count; i++) {\n\n    var bars = new THREE.CylinderGeometry(5, 5, 10, 32);\n\n    var material = new THREE.MeshBasicMaterial({\n      color: Math.random() * 0xffffff,\n      wireframe: true\n    });\n\n    var bar = new THREE.Mesh(bars, material);\n\n    this.scene.add(bar);\n    this.bars.push(bar);\n\n    bar.position.set(this.position, 0, 0);\n\n    this.position += 10;\n  }\n\n  this.equalizer.appendChild(this.renderer.domElement);\n\n  this.render();\n};\n\n// update equalizer based off of audio data\nStage.prototype.update = function () {\n  var _this2 = this;\n\n  var bufferLength = this.analyser.frequencyBinCount;\n  var array = new Uint8Array(bufferLength);\n\n  this.analyser.getByteFrequencyData(array);\n\n  array.forEach(function (threshold, index) {\n\n    _this2.bars[index].scale.y = threshold / 64;\n  });\n};\n\n// draw scene\nStage.prototype.render = function () {\n\n  this.update();\n  this.renderer.render(this.scene, this.camera);\n\n  requestAnimationFrame(this.render.bind(this));\n};\n\nvar stage = new Stage();\n\n},{}]},{},[1])\n\n"],"sourceRoot":"/source/"}