{"version":3,"sources":["node_modules/browser-pack/_prelude.js","app/index.js","main.build.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","Stage","_this","this","audio","equalizer","document","querySelector","width","window","innerWidth","height","innerHeight","viewAngle","aspect","near","far","timer","bars","position","renderer","THREE","WebGLRenderer","camera","PerspectiveCamera","scene","Scene","textureLoader","TextureLoader","createAudio","addEventListener","updateProjectionMatrix","setSize","prototype","init","loadSong","createScene","context","AudioContext","analyser","createAnalyser","smoothingTimeConstant","minDecibels","maxDecibels","fftSize","sourceNode","createBufferSource","splitter","createChannelSplitter","connect","destination","song","_this2","request","XMLHttpRequest","open","crossOrigin","responseType","onload","decodeAudioData","response","then","buffer","songBuffer","playSong","loop","err","_onError","send","duration","start","console","info","averageVolume","array","average","values","forEach","value","add","z","sphereGeo","SphereGeometry","sphereMat","MeshBasicMaterial","map","load","sphere","Mesh","material","side","BackSide","count","CylinderGeometry","color","Math","random","bar","push","set","discoCam","CubeCamera","discoGeo","discoMat","envMap","renderTarget","texture","discoBall","appendChild","domElement","render","update","_this3","bufferLength","frequencyBinCount","Uint8Array","getByteFrequencyData","threshold","index","normLevel","beat","rotation","x","y","setHex","scale","max","updateCubeMap","requestAnimationFrame","bind"],"mappings":"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","file":"main.build.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","'use strict';\r\n\r\n// stage constructor\r\nconst Stage = function() {\r\n\r\n  // selectors\r\n  this.audio = 'audio/dubfx.mp3';\r\n  this.equalizer = document.querySelector('#equalizer');\r\n\r\n  // scene variables\r\n  this.width = window.innerWidth;\r\n  this.height = window.innerHeight;\r\n\r\n  this.viewAngle = 45;\r\n  this.aspect = this.width / this.height;\r\n  this.near = 0.1;\r\n  this.far = 100000;\r\n  this.timer = 0;\r\n  this.bars = [];\r\n  this.position = -80;\r\n\r\n  // camera, renderer and scene set up\r\n  this.renderer = new THREE.WebGLRenderer();\r\n  this.camera = new THREE.PerspectiveCamera(this.viewAngle, this.aspect, this.near, this.far);\r\n  this.scene = new THREE.Scene();\r\n  this.textureLoader = new THREE.TextureLoader()\r\n\r\n  // create audio context call\r\n  this.createAudio();\r\n\r\n  // resize event listener\r\n  window.addEventListener('resize', () => {\r\n\r\n    this.camera.aspect = window.innerWidth / window.innerHeight;\r\n    this.camera.updateProjectionMatrix();\r\n    this.renderer.setSize(window.innerWidth, window.innerHeight);\r\n\r\n  });\r\n\r\n};\r\n\r\n// init scene and play song\r\nStage.prototype.init = function() {\r\n\r\n  this.loadSong(this.audio);\r\n  this.createScene();\r\n\r\n};\r\n\r\n// create audio context\r\nStage.prototype.createAudio = function() {\r\n\r\n  this.context = new AudioContext();\r\n  this.analyser = this.context.createAnalyser();\r\n  this.analyser.smoothingTimeConstant = 0.4;\r\n  this.analyser.minDecibels = -90;\r\n  this.analyser.maxDecibels = -10;\r\n  this.analyser.fftSize = 64;\r\n\r\n  this.sourceNode = this.context.createBufferSource();\r\n  let splitter = this.context.createChannelSplitter();\r\n\r\n  this.sourceNode.connect(splitter);\r\n\r\n  splitter.connect(this.analyser, 0);\r\n\r\n  this.sourceNode.connect(this.context.destination);\r\n\r\n  this.init();\r\n\r\n};\r\n\r\n// load song\r\nStage.prototype.loadSong = function(song) {\r\n\r\n  let request = new XMLHttpRequest();\r\n  request.open('GET', song, true);\r\n  request.crossOrigin = 'anonymous';\r\n  request.responseType = 'arraybuffer';\r\n\r\n  request.onload = () =>  {\r\n\r\n    this.context.decodeAudioData(request.response).then((buffer) => {\r\n\r\n      this.songBuffer = buffer;\r\n      this.playSong(buffer);\r\n      buffer.loop = true;\r\n\r\n    }).catch((err) => this._onError(err));\r\n\r\n  };\r\n\r\n  request.send();\r\n\r\n};\r\n\r\n// play song\r\nStage.prototype.playSong = function(buffer) {\r\n\r\n  let duration = buffer.duration;\r\n  this.sourceNode.buffer = buffer;\r\n  this.sourceNode.start(0);\r\n\r\n};\r\n\r\n// on audio error, display error\r\nStage.prototype._onError = function(err) {\r\n\r\n  console.info('Audio Error: ' + err);\r\n\r\n};\r\n\r\n// return average volume\r\nStage.prototype.averageVolume = function(array) {\r\n\r\n  var values = 0;\r\n  var average;\r\n  var length = array.length;\r\n\r\n  array.forEach((value) => values += value);\r\n\r\n  average = values / length;\r\n\r\n  return average;\r\n\r\n};\r\n\r\n// create scene and objects\r\nStage.prototype.createScene = function() {\r\n\r\n  this.scene.add(this.camera);\r\n\r\n  this.camera.position.z = 2400;\r\n\r\n  this.renderer.setSize(this.width, this.height);\r\n\r\n  // add outer sphere\r\n  let sphereGeo = new THREE.SphereGeometry(2500, 100, 100);\r\n  let sphereMat = new THREE.MeshBasicMaterial({map: this.textureLoader.load('./images/background.jpg'),});\r\n\r\n  this.sphere = new THREE.Mesh(sphereGeo, sphereMat);\r\n  this.sphere.material.side = THREE.BackSide;\r\n\r\n  this.scene.add(this.sphere);\r\n\r\n  // add equalizer bars\r\n  let count = 32;\r\n\r\n  for (let i = 0; i < count; i++) {\r\n\r\n    let bars = new THREE.CylinderGeometry(2, 2, 10, 32);\r\n    let material = new THREE.MeshBasicMaterial({color: Math.random() * 0xFFFFFF});\r\n    let bar = new THREE.Mesh(bars, material);\r\n\r\n    this.bars.push(bar);\r\n    this.scene.add(bar);\r\n\r\n    bar.position.set(this.position, -100, 2000);\r\n\r\n    this.position += 4.75;\r\n\r\n  }\r\n\r\n  // add disco ball\r\n  this.discoCam = new THREE.CubeCamera(1, 100000, 128);\r\n  this.scene.add(this.discoCam);\r\n  this.discoCam.position.set(0, 0, 0);\r\n\r\n  let discoGeo = new THREE.SphereGeometry(450, 75, 75);\r\n  let discoMat = new THREE.MeshBasicMaterial({envMap: this.discoCam.renderTarget.texture});\r\n\r\n  this.discoBall = new THREE.Mesh(discoGeo, discoMat);\r\n  this.discoBall.position.set(0, 100, 0);\r\n  this.scene.add(this.discoBall);\r\n\r\n  this.equalizer.appendChild(this.renderer.domElement);\r\n\r\n  this.render();\r\n\r\n};\r\n\r\n// update objects based off of beat detection\r\nStage.prototype.update = function() {\r\n\r\n  let bufferLength = this.analyser.frequencyBinCount;\r\n  let array = new Uint8Array(bufferLength);\r\n\r\n  this.analyser.getByteFrequencyData(array);\r\n  let average = this.averageVolume(array);\r\n\r\n  array.forEach((threshold, index) => {\r\n\r\n    let normLevel = (average / 64) * 1;\r\n    let beat = normLevel * threshold;\r\n\r\n    this.sphere.rotation.x += 0.00009;\r\n    this.sphere.rotation.y -= 0.0001;\r\n    this.discoBall.rotation.x += 0.001;\r\n    this.discoBall.rotation.y += 0.001;\r\n\r\n    // change bar colors\r\n    if(beat >= 160) {\r\n      this.bars[index].material.color.setHex(Math.random() * 0xFFFFFF);\r\n    }\r\n\r\n    // scale disco ball\r\n    if(beat >= 80) {\r\n      this.discoBall.scale.y = average / 64;\r\n      this.discoBall.scale.x = average / 64;\r\n    }\r\n\r\n    // scale bars to threshold\r\n    this.bars[index].scale.y = Math.max(0.17, threshold / 64);\r\n\r\n  });\r\n\r\n};\r\n\r\n// render scene and camera, call update\r\nStage.prototype.render = function() {\r\n\r\n  this.update();\r\n  this.discoCam.updateCubeMap(this.renderer, this.scene);\r\n  this.renderer.render(this.scene, this.camera);\r\n\r\n  requestAnimationFrame(this.render.bind(this));\r\n\r\n};\r\n\r\nconst stage = new Stage();\r\n","(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n'use strict';\n\n// stage constructor\nvar Stage = function Stage() {\n  var _this = this;\n\n  // selectors\n  this.audio = 'audio/dubfx.mp3';\n  this.equalizer = document.querySelector('#equalizer');\n\n  // scene variables\n  this.width = window.innerWidth;\n  this.height = window.innerHeight;\n\n  this.viewAngle = 45;\n  this.aspect = this.width / this.height;\n  this.near = 0.1;\n  this.far = 100000;\n  this.timer = 0;\n  this.bars = [];\n  this.position = -80;\n\n  // camera, renderer and scene set up\n  this.renderer = new THREE.WebGLRenderer();\n  this.camera = new THREE.PerspectiveCamera(this.viewAngle, this.aspect, this.near, this.far);\n  this.scene = new THREE.Scene();\n  this.textureLoader = new THREE.TextureLoader();\n\n  // create audio context call\n  this.createAudio();\n\n  // resize event listener\n  window.addEventListener('resize', function () {\n\n    _this.camera.aspect = window.innerWidth / window.innerHeight;\n    _this.camera.updateProjectionMatrix();\n    _this.renderer.setSize(window.innerWidth, window.innerHeight);\n  });\n};\n\n// init scene and play song\nStage.prototype.init = function () {\n\n  this.loadSong(this.audio);\n  this.createScene();\n};\n\n// create audio context\nStage.prototype.createAudio = function () {\n\n  this.context = new AudioContext();\n  this.analyser = this.context.createAnalyser();\n  this.analyser.smoothingTimeConstant = 0.4;\n  this.analyser.minDecibels = -90;\n  this.analyser.maxDecibels = -10;\n  this.analyser.fftSize = 64;\n\n  this.sourceNode = this.context.createBufferSource();\n  var splitter = this.context.createChannelSplitter();\n\n  this.sourceNode.connect(splitter);\n\n  splitter.connect(this.analyser, 0);\n\n  this.sourceNode.connect(this.context.destination);\n\n  this.init();\n};\n\n// load song\nStage.prototype.loadSong = function (song) {\n  var _this2 = this;\n\n  var request = new XMLHttpRequest();\n  request.open('GET', song, true);\n  request.crossOrigin = 'anonymous';\n  request.responseType = 'arraybuffer';\n\n  request.onload = function () {\n\n    _this2.context.decodeAudioData(request.response).then(function (buffer) {\n\n      _this2.songBuffer = buffer;\n      _this2.playSong(buffer);\n      buffer.loop = true;\n    })['catch'](function (err) {\n      return _this2._onError(err);\n    });\n  };\n\n  request.send();\n};\n\n// play song\nStage.prototype.playSong = function (buffer) {\n\n  var duration = buffer.duration;\n  this.sourceNode.buffer = buffer;\n  this.sourceNode.start(0);\n};\n\n// on audio error, display error\nStage.prototype._onError = function (err) {\n\n  console.info('Audio Error: ' + err);\n};\n\n// return average volume\nStage.prototype.averageVolume = function (array) {\n\n  var values = 0;\n  var average;\n  var length = array.length;\n\n  array.forEach(function (value) {\n    return values += value;\n  });\n\n  average = values / length;\n\n  return average;\n};\n\n// create scene and objects\nStage.prototype.createScene = function () {\n\n  this.scene.add(this.camera);\n\n  this.camera.position.z = 2400;\n\n  this.renderer.setSize(this.width, this.height);\n\n  // add outer sphere\n  var sphereGeo = new THREE.SphereGeometry(2500, 100, 100);\n  var sphereMat = new THREE.MeshBasicMaterial({ map: this.textureLoader.load('./images/background.jpg') });\n\n  this.sphere = new THREE.Mesh(sphereGeo, sphereMat);\n  this.sphere.material.side = THREE.BackSide;\n\n  this.scene.add(this.sphere);\n\n  // add equalizer bars\n  var count = 32;\n\n  for (var i = 0; i < count; i++) {\n\n    var bars = new THREE.CylinderGeometry(2, 2, 10, 32);\n    var material = new THREE.MeshBasicMaterial({ color: Math.random() * 0xFFFFFF });\n    var bar = new THREE.Mesh(bars, material);\n\n    this.bars.push(bar);\n    this.scene.add(bar);\n\n    bar.position.set(this.position, -100, 2000);\n\n    this.position += 4.75;\n  }\n\n  // add disco ball\n  this.discoCam = new THREE.CubeCamera(1, 100000, 128);\n  this.scene.add(this.discoCam);\n  this.discoCam.position.set(0, 0, 0);\n\n  var discoGeo = new THREE.SphereGeometry(450, 75, 75);\n  var discoMat = new THREE.MeshBasicMaterial({ envMap: this.discoCam.renderTarget.texture });\n\n  this.discoBall = new THREE.Mesh(discoGeo, discoMat);\n  this.discoBall.position.set(0, 100, 0);\n  this.scene.add(this.discoBall);\n\n  this.equalizer.appendChild(this.renderer.domElement);\n\n  this.render();\n};\n\n// update objects based off of beat detection\nStage.prototype.update = function () {\n  var _this3 = this;\n\n  var bufferLength = this.analyser.frequencyBinCount;\n  var array = new Uint8Array(bufferLength);\n\n  this.analyser.getByteFrequencyData(array);\n  var average = this.averageVolume(array);\n\n  array.forEach(function (threshold, index) {\n\n    var normLevel = average / 64 * 1;\n    var beat = normLevel * threshold;\n\n    _this3.sphere.rotation.x += 0.00009;\n    _this3.sphere.rotation.y -= 0.0001;\n    _this3.discoBall.rotation.x += 0.001;\n    _this3.discoBall.rotation.y += 0.001;\n\n    // change bar colors\n    if (beat >= 160) {\n      _this3.bars[index].material.color.setHex(Math.random() * 0xFFFFFF);\n    }\n\n    // scale disco ball\n    if (beat >= 80) {\n      _this3.discoBall.scale.y = average / 64;\n      _this3.discoBall.scale.x = average / 64;\n    }\n\n    // scale bars to threshold\n    _this3.bars[index].scale.y = Math.max(0.17, threshold / 64);\n  });\n};\n\n// render scene and camera, call update\nStage.prototype.render = function () {\n\n  this.update();\n  this.discoCam.updateCubeMap(this.renderer, this.scene);\n  this.renderer.render(this.scene, this.camera);\n\n  requestAnimationFrame(this.render.bind(this));\n};\n\nvar stage = new Stage();\n\n},{}]},{},[1])\n\n"],"sourceRoot":"/source/"}